- hosts: all
  become: no # sudoで行わない
  user: vagrant
  environment:
    ansible_python_interpreter: /usr/bin/python2.7
    RUBY_CONFIGURE_OPTS: "--with-readline-dir=/usr/include/readline --with-openssl-dir=/usr/bin --enable-shared"
  # pre_tasks:
    # - name: Get ansible_user home directory
    #   shell: 'getent passwd "{{ansible_ssh_user}}" | cut -d: -f6'
    #   register: ansible_home_result
    #   changed_when: false
    #   always_run: yes
    # - name: Set the fact for the other scripts to use
    #   set_fact: ansible_home='{{ansible_home_result.stdout}}'
  tasks:
    - name: echo "foo"
      shell: echo "foo"
  #   - name: add some repository
  #     apt_repository: repo="{{ item }}"
  #     become: yes
  #     with_items:
  #       - ppa:neovim-ppa/unstable
  #       - ppa:ansible/ansible
  #   - name: install some packages
  #     apt: name={{ item }} state=latest update_cache=yes
  #     become: yes
  #     with_items:
  #       - build-essential
  #       - language-pack-ja
  #       - fontconfig
  #       - openssh-client
  #       - openssh-server
  #       - openssl
  #       - curl
  #       - wget
  #       - git-core
  #       - bison
  #       - nkf # 文字コード変換
  #       - sqlite3
  #       - autoconf
  #       - redis-server
  #       - python-dev
  #       - python-pip
  #       - python3
  #       - python3-dev
  #       - python3-pip
  #       - ruby2.3
  #       - ruby2.3-dev
  #       - lua5.2
  #       - golang
  #       - neovim
  #       - zsh
  #       - xinetd
  #       - rsync
  #       - lsyncd
  #       - ansible
  #       - ncdu # ディスク使用量チェック
  #       - xserver-xorg
  #       - x11-apps # xclockとか xeyesとか入ってる
  #       - fontforge # font処理
  #       - apt-transport-https # docker用
  #       - ca-certificates # docker用
  #       - apparmor # docker用
  #       - docker-engine
  #       # - colordiff # diffに色を付ける
  #       # - sysv-rc-conf # 自動起動用に必要？
  #       # llvm #Cコンパイラ
  #       # clang #Cコンパイラ
  #       - libyaml-dev
  #       - libsqlite3-dev
  #       - libreadline-dev
  #       - libssl-dev
  #       - zlib1g-dev
  #       - libxml2-dev
  #       - libxslt1-dev
  #       - libffi-dev
  #       - libcurl4-openssl-dev
  #       - libncurses5-dev
  #       - libpcre3-dev
  #       - libgdbm-dev
  #       - libbz2-dev
  #       # - libpq-dev # postgreSQL用
  #       # - libmysqlclient-dev # MySQL用
  #       # - libmongo-client-dev # mongoDB用
  #   - name: set locale ja
  #     locale_gen: name=ja_JP.UTF-8 state=present
  #   - name: restart ssh server
  #     service: name=ssh state=restarted enabled=yes
  #     changed_when: false
  #     become: yes
  #   - name: start redis server
  #     service: name=redis-server state=started enabled=yes
  #     become: yes
  #   - name: copy fonts
  #     become: yes
  #     copy: src={{ item.src }} dest={{ item.dest }}
  #     with_items:
  #       - src: ~/Library/Fonts/
  #         dest: /usr/local/share/fonts/
  #   - name: authorized_keys_bk exist check
  #     stat: path=~/.ssh/authorized_keys_bk
  #     register: authorized_keys_bk_f
  #   - name: copy authorized_keys to authorized_keys_bk
  #     shell: mv ~/.ssh/authorized_keys ~/.ssh/authorized_keys_bk
  #     when: not authorized_keys_bk_f.stat.exists
  #   - name: sync hosts ssh keys
  #     copy: src={{ item.src }} dest={{ item.dest }} owner=vagrant group=vagrant mode=700
  #     become: yes
  #     changed_when: false
  #     with_items:
  #       - src: ~/.ssh/
  #         dest: "{{ ansible_home }}/.ssh/"
  #   - name: authorized_keys check
  #     shell: cat ~/.ssh/authorized_keys | awk '{print $3}'
  #     register: authorized_keys_list
  #     changed_when: false
  #     always_run: yes
  #   - name: cat authorized_keys and authorized_keys_bk
  #     shell: cat ~/.ssh/authorized_keys_bk >> ~/.ssh/authorized_keys
  #     changed_when: false
  #     when: authorized_keys_list.stdout_lines.count("vagrant") < 1
  #   - name: mkdir
  #     file: path={{ item }} state=directory
  #     with_items:
  #       - ~/.config
  #       - ~/.homesick/repos
  #       - ~/.zplug/bin
  #       - ~/.zplug/repos/riywo
  #   - name: git clone
  #     git: repo={{ item.repo }} dest={{ item.dest }}
  #     with_items:
  #       - repo: https://github.com/riywo/anyenv.git
  #         dest: ~/.zplug/repos/riywo/anyenv
  #       - repo: git@github.com:pyarbz/dotfiles.git
  #         dest: ~/.homesick/repos/dotfiles
  #   - name: symlink
  #     file: src={{ item.src }} dest={{ item.dest }} state=link
  #     with_items:
  #       - src: ~/.homesick/repos/dotfiles/home/.gemrc
  #         dest: ~/.gemrc
  #       - src: ~/.homesick/repos/dotfiles/home/.gitconfig
  #         dest: ~/.gitconfig
  #       - src: ~/.homesick/repos/dotfiles/home/.gitignore_global
  #         dest: ~/.gitignore_global
  #       - src: ~/.homesick/repos/dotfiles/home/.editorconfig
  #         dest: ~/.editorconfig
  #       - src: ~/.homesick/repos/dotfiles/home/.pryrc
  #         dest: ~/.pryrc
  #       - src: ~/.homesick/repos/dotfiles/home/.rubocop.yml
  #         dest: ~/.rubocop.yml
  #       - src: ~/.homesick/repos/dotfiles/home/coffeelint.json
  #         dest: ~/coffeelint.json
  #       - src: ~/.homesick/repos/dotfiles/home/.vim
  #         dest: ~/.vim
  #       - src: ~/.homesick/repos/dotfiles/home/.zsh
  #         dest: ~/.zsh
  #       - src: ~/.vim
  #         dest: ~/.config/nvim
  #       - src: ~/.zsh/config/zshenv/init.zsh
  #         dest: ~/.zshenv
  #       - src: ~/.zsh/config/zshrc/init.zsh
  #         dest: ~/.zshrc
  #   - name: font update
  #     shell: fc-cache -vf
  #     changed_when: false
  #     become: yes
  #   - name: eval anyenv
  #     shell: bash -lc 'eval "$(anyenv init -)"'
  #     changed_when: false
  #   - name: anyenv version check
  #     shell: anyenv version | awk 'sub(/.$/,"",$1)' | awk '{print $1}'
  #     register: anyenv_list
  #     changed_when: false
  #     always_run: yes
  #   - name: anyenv install rbenv pyenv ndenv
  #     shell: anyenv install {{ item }}
  #     when: anyenv_list.stdout_lines.count("{{ item }}") < 1
  #     with_items:
  #       - rbenv
  #       - pyenv
  #       - ndenv
  #   - name: ndenv version check
  #     shell: ndenv versions
  #     register: ndenv_list
  #     changed_when: false
  #     always_run: yes
  #   - name: ndenv install v5.10.1, v4.4.3
  #     shell: ndenv install {{ item }} && ndenv global {{ item }} && ndenv rehash && ndenv exec npm install -g npm
  #     when: ndenv_list.stdout.find("{{ item }}") == -1
  #     with_items:
  #       - v4.4.3
  #       - v5.10.1
  #   - name: rbenv version check
  #     shell: rbenv versions
  #     register: rbenv_list
  #     changed_when: false
  #     always_run: yes
  #   - name: rbenv install 2.2.4, 2.3.0
  #     shell: rbenv install {{ item }} && rbenv global {{ item }} && rbenv rehash && rbenv exec gem update --system && rbenv exec gem install bundler
  #     when: rbenv_list.stdout.find("{{ item }}") == -1
  #     with_items:
  #       - 2.2.4
  #       - 2.3.0
  #   - name: pyenv version check
  #     shell: pyenv versions
  #     register: pyenv_list
  #     changed_when: false
  #     always_run: yes
  #   - name: pyenv install 2.7.11, 3.5.1
  #     shell: pyenv install {{ item }} && pyenv global {{ item }} && pyenv rehash && pyenv exec pip install --upgrade pip && pyenv exec pip install virtualenv && pyenv exec pip install pip-tools
  #     when: pyenv_list.stdout.find("{{ item }}") == -1
  #     with_items:
  #       - 2.7.11
  #       - 3.5.1
  #   - name: change zsh
  #     user: name='vagrant' shell='/usr/bin/zsh'
  #     become: yes
